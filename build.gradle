plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
    id 'net.kyori.indra.publishing' version '1.0.2' apply false
    id 'java'
}

import org.apache.tools.ant.filters.ReplaceTokens

allprojects {
    group = 'net.essentialsx'
    version = '2.19.0-SNAPSHOT'
}

def commitsSinceLastTag() {
    def tags = grgit.tag.list().stream().map({it.commit}).toList()
    def commit = grgit.head()
    def depth = 0
    while (true) {
        if (tags.contains(commit))
            return depth
        depth++
        commit = grgit.resolve.toCommit(commit.parentIds.get(0))
    }
}

ext {
    GIT_COMMIT = grgit.head().abbreviatedId
    GIT_DEPTH = commitsSinceLastTag()

    fullVersion = "${version}+${GIT_DEPTH}.${GIT_COMMIT}".toString().replace("-SNAPSHOT", "")

    checkstyleVersion = '8.36.2'
    spigotVersion = '1.16.4-R0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://ci.ender.zone/plugin/repository/everything/' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/groups/public/' }
        maven { url = 'https://papermc.io/repo/repository/maven-public/' }
        maven {
            url = 'https://jitpack.io'
            content {
                includeGroup "com.github.milkbowl"
            }
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.13.1'
        testImplementation 'org.mockito:mockito-core:3.2.0'

        if (project.name != "1_8Provider" && project.name != "PaperProvider" && project.name != "NMSReflectionProvider") { // These providers use their own bukkit versions
            api "org.spigotmc:spigot-api:${spigotVersion}"
        }
    }

    // Version Injection
    processResources {
        filter(ReplaceTokens, beginToken: '${',
                endToken: '}', tokens: ["full.version": fullVersion])
    }

    // Checkstyle
    checkstyle {
        toolVersion = "${checkstyleVersion}"
        configDirectory.set(rootProject.file(".checkstyle"))
    }
    tasks.build.dependsOn tasks.checkstyleMain

    // Versioning & Encoding
    sourceCompatibility = '1.8'
    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        if (JavaVersion.current().isJava9Compatible()) {
            options.release.set(8)
        }
    }
    tasks.withType(Jar) {
        archiveVersion.set(fullVersion)
    }
}

def outputTasks() {
    [":EssentialsX:shadowJar", ":EssentialsXAntiBuild:jar", ":EssentialsXChat:jar",
     ":EssentialsXGeoIP:shadowJar", ":EssentialsXProtect:jar", ":EssentialsXSpawn:shadowJar",
     ":EssentialsXXMPP:shadowJar"].stream().map({ tasks.findByPath(it) })
}

task copyToJars(type: Copy) {
    outputTasks().forEach {
        from(it)
    }

    rename '(.*)-all.jar', '$1.jar'

    into file('jars')
}

task cleanJars() {
    delete file('jars')
}

build.dependsOn copyToJars
clean.dependsOn cleanJars
copyToJars.dependsOn tasks.findByPath(":EssentialsX:processResources")
